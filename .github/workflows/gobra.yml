name: Verify the specified codebase

on:
  push: # run this workflow on every push
  pull_request: # run this workflow on every pull_request

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    env:
      imageVersion: 'v25.09'
      module: 'github.com/scionproto/scion/'
      includePaths: '. ./gobra/stdlib-specs'
    steps:
      - name: Checkout the SCION repository
        uses: actions/checkout@v2
      - name: Set-up caching for the verification results
        uses: actions/cache@v3
        env:
          cache-name: gobra-cache
        with:
          path: ${{ runner.workspace }}/.gobra/cache.json
          key: ${{ env.cache-name }}
      - name: Check that package gobra/utils is well-formed
        uses: viperproject/gobra-action@v25.09
        with:
          packages: 'gobra/utils'
          # Gobra only verifies files annotated with the header "// +gobra"
          headerOnly: '1'
          timeout: 2m
          imageVersion: ${{ env.imageVersion }}
          module: ${{ env.module }}
          includePaths: ${{ env.includePaths }}
      - name: Check that specifications of third-party libraries are well-formed
        uses: viperproject/gobra-action@v25.09
        with:
          projectLocation: 'scion/gobra/stdlib-specs'
          # Gobra only verifies files annotated with the header "// +gobra"
          headerOnly: '1'
          # Traverse the entire repository, including nested packages,
          # in search for annotated files to verify
          recursive: '1'
          timeout: 10m
          imageVersion: ${{ env.imageVersion }}
          module: ${{ env.module }}
          includePaths: ${{ env.includePaths }}
      - name: Verify the specified files
        uses: viperproject/gobra-action@v22.10.2
        with:
          # Prefix used to resolve SCION packages
          module: 'github.com/scionproto/scion/'
          # Gobra only verifies files annotated with the header "// +gobra"
          headerOnly: '1'
          # Traverse the entire repository, including nested packages,
          # in search for annotated files to verify
          recursive: '1'
          timeout: 10m
          caching: '1'
          statsFile: ${{ env.statsFile }}