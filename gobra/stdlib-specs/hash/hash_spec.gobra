// Copyright 2025 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package hash

//import "io"

type Hash interface {
	pred Mem()

	preserves Mem() 
	preserves acc(p, 1/1000)
	ensures   0 <= n && n <= len(p)
	// the last conjunct comes from the spec of io.Writer
	ensures   err == nil && n == len(p)
	ensures   Size() == old(Size()) + len(p)
	decreases
	Write(p []byte) (n int, err error)

	// Sum appends the current hash to b and returns the resulting slice.
	// It does not change the underlying hash state.
	preserves acc(Mem(), 1/1000)
	requires acc(b)
	ensures  acc(res) && len(res) == Size()
	decreases
	Sum(b []byte) (res []byte)

	// Reset resets the Hash to its initial state.
	preserves Mem()
	decreases
	Reset()

	// Size returns the number of bytes Sum will return.
	requires acc(Mem(), _)
	ensures  res >= 0
	decreases
	pure Size() (res int)

	// BlockSize returns the hash's underlying block size.
	// The Write method must be able to accept any amount
	// of data, but it may operate more efficiently if all writes
	// are a multiple of the block size.
	requires acc(Mem(), _)
	ensures  res >= 0
	decreases
	BlockSize() (res int)
}